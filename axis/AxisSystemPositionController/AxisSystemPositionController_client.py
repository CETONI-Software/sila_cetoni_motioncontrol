#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: sila_cetoni

*MotionControl client*

:details: MotionControl:
    Allows to control motion systems like axis systems

:file:    AxisSystemPositionController_client.py
:authors: Florian Meinicke

:date: (creation)          2021-07-09T10:33:23.853801
:date: (last modification) 2021-07-09T10:33:23.853801

.. note:: Code generated by sila2codegenerator 0.3.6

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time
import datetime

# import meta packages
from typing import Union, Optional, Dict

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
from sila2lib.error_handling.client_err import SiLAClientError
import sila2lib.utils.py2sila_types as p2s
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from .gRPC import AxisSystemPositionController_pb2
from .gRPC import AxisSystemPositionController_pb2_grpc
# import default arguments for this feature
from .AxisSystemPositionController_default_arguments import default_dict as AxisSystemPositionController_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class AxisSystemPositionControllerClient:
    """
        Allows to control motion systems like axis systems

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 channel = None):
        """Class initialiser"""

        # Create stub objects used to communicate with the server
        self.AxisSystemPositionController_stub = \
            AxisSystemPositionController_pb2_grpc.AxisSystemPositionControllerStub(channel)


        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''

    def MoveToPosition(self, Position: Dict[str, float], Velocity: int) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Wrapper to call the observable command MoveToPosition on the server.

        :param Position: The (x,y) position to move to (has to be a dict with keys
                         'x' and 'y' and their corresponding values)
        :param Velocity: An integer value between 0 (exclusive) and 100 (inclusive)
                         defining the relative speed at which all axes of the axis
                         system should move. The velocity value is multiplied with
                         the maximum velocity value of each axis. So a value of 100
                         means, all axes travel with their maximum velocity. A value
                         of 50 means, all axes travel with the half of the maximum
                         velocity.

        :returns: A command confirmation object with the following information:
            commandExecutionUUID: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling MoveToPosition:")
        try:
            parameter = AxisSystemPositionController_pb2.MoveToPosition_Parameters(
                Position=AxisSystemPositionController_pb2.DataType_Position(
                    Position=AxisSystemPositionController_pb2.DataType_Position.Position_Struct(
                        X=silaFW_pb2.Real(value=Position['x']),
                        Y=silaFW_pb2.Real(value=Position['y']))
                )
            )

            response = self.AxisSystemPositionController_stub.MoveToPosition(parameter)

            logging.debug('MoveToPosition response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition_Info(self,
                            uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command MoveToPosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToPosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )
        try:
            response = self.AxisSystemPositionController_stub.MoveToPosition_Info(uuid)
            logging.debug('MoveToPosition status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition_Result(self,
                              uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> AxisSystemPositionController_pb2.MoveToPosition_Responses:
        """
        Wrapper to get an intermediate response for the observable command MoveToPosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the result response that has been defined for this command.

        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`MoveToPosition_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToPosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )

        try:
            response = self.AxisSystemPositionController_stub.MoveToPosition_Result(uuid)
            logging.debug('MoveToPosition result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToHomePosition(self): # -> (AxisSystemPositionController):
        """
        Wrapper to call the unobservable command MoveToHomePosition on the server.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling MoveToHomePosition:")
        try:
            response = self.AxisSystemPositionController_stub.MoveToHomePosition(
                AxisSystemPositionController_pb2.MoveToHomePosition_Parameters()
            )
            logging.debug(f"MoveToHomePosition response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return


    def StopMoving(self): # -> (AxisSystemPositionController):
        """
        Wrapper to call the unobservable command StopMoving on the server.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling StopMoving:")
        try:
            response = self.AxisSystemPositionController_stub.StopMoving(
                AxisSystemPositionController_pb2.StopMoving_Parameters()
            )
            logging.debug(f"StopMoving response: {response}")

        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return



    def Subscribe_Position(self) \
            -> AxisSystemPositionController_pb2.Subscribe_Position_Responses:
        """Wrapper to get property Position from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property Position:")
        try:
            response = self.AxisSystemPositionController_stub.Subscribe_Position(
                AxisSystemPositionController_pb2.Subscribe_Position_Parameters()
            )
            logging.debug(
                'Subscribe_Position response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    #   No metadata defined

    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        logging.error(grpc_error.error_type)
        if hasattr(grpc_error.message, "parameter"):
            logging.error(grpc_error.message.parameter)
        logging.error(grpc_error.message.message)
        if grpc_error.error_type == client_err.SiLAError.DEFINED_EXECUTION_ERROR:
          if grpc_error.message.errorIdentifier == 'MovementBlocked' :
            raise MovementBlockedError(grpc_error.message.message)


class MovementBlockedError(SiLAClientError):
    """Movement Blocked
    """
    pass


