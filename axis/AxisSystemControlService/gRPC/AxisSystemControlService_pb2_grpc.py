# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import AxisSystemControlService_pb2 as AxisSystemControlService__pb2


class AxisSystemControlServiceStub(object):
    """Feature: Axis System Control Service
    Provides functionality to observe and control the state of an axis system
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnableAxisSystem = channel.unary_unary(
                '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/EnableAxisSystem',
                request_serializer=AxisSystemControlService__pb2.EnableAxisSystem_Parameters.SerializeToString,
                response_deserializer=AxisSystemControlService__pb2.EnableAxisSystem_Responses.FromString,
                )
        self.DisableAxisSystem = channel.unary_unary(
                '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/DisableAxisSystem',
                request_serializer=AxisSystemControlService__pb2.DisableAxisSystem_Parameters.SerializeToString,
                response_deserializer=AxisSystemControlService__pb2.DisableAxisSystem_Responses.FromString,
                )
        self.ClearAxisFaultState = channel.unary_unary(
                '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/ClearAxisFaultState',
                request_serializer=AxisSystemControlService__pb2.ClearAxisFaultState_Parameters.SerializeToString,
                response_deserializer=AxisSystemControlService__pb2.ClearAxisFaultState_Responses.FromString,
                )
        self.Get_AvailableAxes = channel.unary_unary(
                '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Get_AvailableAxes',
                request_serializer=AxisSystemControlService__pb2.Get_AvailableAxes_Parameters.SerializeToString,
                response_deserializer=AxisSystemControlService__pb2.Get_AvailableAxes_Responses.FromString,
                )
        self.Subscribe_AxisSystemState = channel.unary_stream(
                '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Subscribe_AxisSystemState',
                request_serializer=AxisSystemControlService__pb2.Subscribe_AxisSystemState_Parameters.SerializeToString,
                response_deserializer=AxisSystemControlService__pb2.Subscribe_AxisSystemState_Responses.FromString,
                )
        self.Subscribe_AxisFaultState = channel.unary_stream(
                '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Subscribe_AxisFaultState',
                request_serializer=AxisSystemControlService__pb2.Subscribe_AxisFaultState_Parameters.SerializeToString,
                response_deserializer=AxisSystemControlService__pb2.Subscribe_AxisFaultState_Responses.FromString,
                )
        self.Get_FCPAffectedByMetadata_AxisIdentifier = channel.unary_unary(
                '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Get_FCPAffectedByMetadata_AxisIdentifier',
                request_serializer=AxisSystemControlService__pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Parameters.SerializeToString,
                response_deserializer=AxisSystemControlService__pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses.FromString,
                )


class AxisSystemControlServiceServicer(object):
    """Feature: Axis System Control Service
    Provides functionality to observe and control the state of an axis system
    """

    def EnableAxisSystem(self, request, context):
        """Enable Axis System
        Set all axes of the axis system into enabled state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableAxisSystem(self, request, context):
        """Disable Axis System
        Set all axes of the axis system into disabled state
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearAxisFaultState(self, request, context):
        """Clear Axis Fault State
        Clears the fault condition of a single axis. This is some kind of error acknowledge that clears the last fault and sets
        the device in an error-free state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_AvailableAxes(self, request, context):
        """Available Axes
        The names of the individual axes of the axis system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_AxisSystemState(self, request, context):
        """Axis System State
        The current state of the axis system. This is either 'Enabled' or 'Disabled'. Only if the state is 'Enabled', the axis
        system can move.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe_AxisFaultState(self, request, context):
        """Axis Fault State
        Returns if a single axis of the system is in fault state. If the value is true (i.e. the axis is in fault state), it can
        be cleared by calling ClearAxisFaultState.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get_FCPAffectedByMetadata_AxisIdentifier(self, request, context):
        """Axis Identifier
        The identifier of a single axis of an axis system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AxisSystemControlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnableAxisSystem': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableAxisSystem,
                    request_deserializer=AxisSystemControlService__pb2.EnableAxisSystem_Parameters.FromString,
                    response_serializer=AxisSystemControlService__pb2.EnableAxisSystem_Responses.SerializeToString,
            ),
            'DisableAxisSystem': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableAxisSystem,
                    request_deserializer=AxisSystemControlService__pb2.DisableAxisSystem_Parameters.FromString,
                    response_serializer=AxisSystemControlService__pb2.DisableAxisSystem_Responses.SerializeToString,
            ),
            'ClearAxisFaultState': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearAxisFaultState,
                    request_deserializer=AxisSystemControlService__pb2.ClearAxisFaultState_Parameters.FromString,
                    response_serializer=AxisSystemControlService__pb2.ClearAxisFaultState_Responses.SerializeToString,
            ),
            'Get_AvailableAxes': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_AvailableAxes,
                    request_deserializer=AxisSystemControlService__pb2.Get_AvailableAxes_Parameters.FromString,
                    response_serializer=AxisSystemControlService__pb2.Get_AvailableAxes_Responses.SerializeToString,
            ),
            'Subscribe_AxisSystemState': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_AxisSystemState,
                    request_deserializer=AxisSystemControlService__pb2.Subscribe_AxisSystemState_Parameters.FromString,
                    response_serializer=AxisSystemControlService__pb2.Subscribe_AxisSystemState_Responses.SerializeToString,
            ),
            'Subscribe_AxisFaultState': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe_AxisFaultState,
                    request_deserializer=AxisSystemControlService__pb2.Subscribe_AxisFaultState_Parameters.FromString,
                    response_serializer=AxisSystemControlService__pb2.Subscribe_AxisFaultState_Responses.SerializeToString,
            ),
            'Get_FCPAffectedByMetadata_AxisIdentifier': grpc.unary_unary_rpc_method_handler(
                    servicer.Get_FCPAffectedByMetadata_AxisIdentifier,
                    request_deserializer=AxisSystemControlService__pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Parameters.FromString,
                    response_serializer=AxisSystemControlService__pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AxisSystemControlService(object):
    """Feature: Axis System Control Service
    Provides functionality to observe and control the state of an axis system
    """

    @staticmethod
    def EnableAxisSystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/EnableAxisSystem',
            AxisSystemControlService__pb2.EnableAxisSystem_Parameters.SerializeToString,
            AxisSystemControlService__pb2.EnableAxisSystem_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableAxisSystem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/DisableAxisSystem',
            AxisSystemControlService__pb2.DisableAxisSystem_Parameters.SerializeToString,
            AxisSystemControlService__pb2.DisableAxisSystem_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearAxisFaultState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/ClearAxisFaultState',
            AxisSystemControlService__pb2.ClearAxisFaultState_Parameters.SerializeToString,
            AxisSystemControlService__pb2.ClearAxisFaultState_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_AvailableAxes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Get_AvailableAxes',
            AxisSystemControlService__pb2.Get_AvailableAxes_Parameters.SerializeToString,
            AxisSystemControlService__pb2.Get_AvailableAxes_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_AxisSystemState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Subscribe_AxisSystemState',
            AxisSystemControlService__pb2.Subscribe_AxisSystemState_Parameters.SerializeToString,
            AxisSystemControlService__pb2.Subscribe_AxisSystemState_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe_AxisFaultState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Subscribe_AxisFaultState',
            AxisSystemControlService__pb2.Subscribe_AxisFaultState_Parameters.SerializeToString,
            AxisSystemControlService__pb2.Subscribe_AxisFaultState_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get_FCPAffectedByMetadata_AxisIdentifier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sila2.de.cetoni.motioncontrol.axis.axissystemcontrolservice.v1.AxisSystemControlService/Get_FCPAffectedByMetadata_AxisIdentifier',
            AxisSystemControlService__pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Parameters.SerializeToString,
            AxisSystemControlService__pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
