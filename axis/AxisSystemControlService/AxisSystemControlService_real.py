"""
________________________________________________________________________

:PROJECT: SiLA2_python

*Axis System Control Service*

:details: AxisSystemControlService:
    Provides functionality to observe and control the state of an axis system

:file:    AxisSystemControlService_real.py
:authors: Florian Meinicke

:date: (creation)          2020-12-15T07:50:56.811849
:date: (last modification) 2020-12-15T07:50:56.811849

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only

from typing import Dict

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2
# import SiLA errors
from impl.common.qmix_errors import SiLAFrameworkError, SiLAFrameworkErrorType, SiLAExecutionError

# import gRPC modules for this feature
from .gRPC import AxisSystemControlService_pb2 as AxisSystemControlService_pb2
# from .gRPC import AxisSystemControlService_pb2_grpc as AxisSystemControlService_pb2_grpc

# import default arguments
from .AxisSystemControlService_default_arguments import default_dict

from qmixsdk.qmixmotion import Axis, AxisSystem

# noinspection PyPep8Naming,PyUnusedLocal
class AxisSystemControlServiceReal:
    """
    Implementation of the *Axis System Control Service* in *Real* mode
        Allows to control motion systems like axis systems
    """

    def __init__(self, axis_system: AxisSystem):
        """
        Class initialiser.

        :param axis_system: The axis system that this feature shall operate on
        """

        self.axis_system = axis_system
        self.axes: Dict[str, Axis] = {
            self.axis_system.get_axis_device(i).get_device_name(): self.axis_system.get_axis_device(i)
            for i in range(self.axis_system.get_axes_count())
        }

        self.METADATA_AXIS_IDENTIFIER = 'sila-de.cetoni-motioncontrol.axis-axissystemcontrolservice-v1-metadata-axisidentifier-bin'

        logging.debug('Started server in mode: {mode}'.format(mode='Real'))

    def _get_axis_name(self, invocation_metadata: Dict) -> str:
        """
        Retrieves the axis name that is given in the `invocation_metadata` of a RPC.
        If the metadatum is not present an appropriate error is raised.
        """
        invocation_metadata = {key: value for key, value in invocation_metadata}
        logging.debug(f"Received invocation metadata: {invocation_metadata}")
        try:
            return invocation_metadata[self.METADATA_AXIS_IDENTIFIER].decode('utf-8')
        except KeyError:
            raise SiLAFrameworkError(SiLAFrameworkErrorType.INVALID_METADATA,
                                     'This Command requires the AxisIdentifier metadata!')


    def EnableAxisSystem(self, request, context: grpc.ServicerContext) \
            -> AxisSystemControlService_pb2.EnableAxisSystem_Responses:
        """
        Executes the unobservable command "Enable Axis System"
            Set all axes of the axis system into enabled state

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        self.axis_system.enable(True)

        return AxisSystemControlService_pb2.EnableAxisSystem_Responses()


    def DisableAxisSystem(self, request, context: grpc.ServicerContext) \
            -> AxisSystemControlService_pb2.DisableAxisSystem_Responses:
        """
        Executes the unobservable command "Disable Axis System"
            Set all axes of the axis system into disabled state

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        self.axis_system.enable(False)

        return AxisSystemControlService_pb2.DisableAxisSystem_Responses()


    def ClearAxisFaultState(self, request, context: grpc.ServicerContext) \
            -> AxisSystemControlService_pb2.ClearAxisFaultState_Responses:
        """
        Executes the unobservable command "Clear Axis Fault State"
            Clears the fault condition of a single axis. This is some kind of error acknowledge that clears the last fault and sets the device in an error-free state.

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        axis_name = self._get_axis_name(context.invocation_metadata())

        try:
            self.axes[axis_name].clear_fault()
        except KeyError:
            raise SiLAExecutionError(msg=f'There is no axis named {axis_name}!')

        return AxisSystemControlService_pb2.ClearAxisFaultState_Responses()


    def Get_AvailableAxes(self, request, context: grpc.ServicerContext) \
            -> AxisSystemControlService_pb2.Get_AvailableAxes_Responses:
        """
        Requests the unobservable property Available Axes
            The names of the individual axes of the axis system.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            AvailableAxes (Available Axes): The names of the individual axes of the axis system.
        """

        return AxisSystemControlService_pb2.Get_AvailableAxes_Responses(
            AvailableAxes=[
                silaFW_pb2.String(value=axis_name) for axis_name in self.axes.keys()
            ]
        )

    def Subscribe_AxisSystemState(self, request, context: grpc.ServicerContext) \
            -> AxisSystemControlService_pb2.Subscribe_AxisSystemState_Responses:
        """
        Requests the observable property Axis System State
            The current state of the axis system. This is either 'Enabled' or 'Disabled'. Only if the state is 'Enabled', the axis system can move.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            AxisSystemState (Axis System State): The current state of the axis system. This is either 'Enabled' or 'Disabled'. Only if the sate is 'Enabled', the axis system can move.
        """

        while True:
            enabled = True
            for axis in self.axes.values():
                logging.debug(f"Axis {axis.get_device_name()} enabled? {axis.is_enabled()}")
                enabled &= axis.is_enabled()

            logging.debug(f"Axis system enabled? {enabled}")
            yield AxisSystemControlService_pb2.Subscribe_AxisSystemState_Responses(
                AxisSystemState=silaFW_pb2.String(value='Enabled' if enabled else 'Disabled')
            )

            time.sleep(0.5) # give client some time to catch up

    def Subscribe_AxisFaultState(self, request, context: grpc.ServicerContext) \
            -> AxisSystemControlService_pb2.Subscribe_AxisFaultState_Responses:
        """
        Requests the observable property Axis Fault State
            Returns if a single axis of the system is in fault state. If the value is true (i.e. the axis is in fault state), it can be cleared by calling ClearAxisFaultState.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            AxisFaultState (Axis Fault State): Returns if a single axis of the system is in fault state. If the value is true (i.e. the axis is in fault state), it can be cleared by calling ClearAxisFaultState.
        """
        axis_name = self._get_axis_name(context.invocation_metadata())

        while True:
            yield AxisSystemControlService_pb2.Subscribe_AxisFaultState_Responses(
                AxisFaultState=silaFW_pb2.Boolean(value=self.axes[axis_name].is_in_fault_state())
            )

            time.sleep(0.5) # give client some time to catch up


    def Get_FCPAffectedByMetadata_AxisIdentifier(self, request, context: grpc.ServicerContext) \
            -> AxisSystemControlService_pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses:
        """
        Requests the unobservable property FCPAffectedByMetadata Axis Identifier
            Specifies which Features/Commands/Properties of the SiLA server are affected by the Axis Identifier Metadata.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            AffectedCalls (AffectedCalls): A string containing a list of Fully Qualified Identifiers of Features, Commands and Properties for which the SiLA Client Metadata is expected as part of the respective RPCs.
        """

        return AxisSystemControlService_pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses(
            AffectedCalls=[
                silaFW_pb2.String(value="ClearAxisFaultState"),
                silaFW_pb2.String(value="AxisFaultState"),
            ]
        )

