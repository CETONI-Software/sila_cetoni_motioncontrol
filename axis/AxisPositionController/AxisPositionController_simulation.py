"""
________________________________________________________________________

:PROJECT: sila_cetoni

*Axis Position Controller*

:details: AxisPositionController:
    Allows to control the position of one axis of an axis system

:file:    AxisPositionController_simulation.py
:authors: Florian Meinicke

:date: (creation)          2020-12-17T10:31:32.038797
:date: (last modification) 2020-12-17T10:31:32.038797

.. note:: Code generated by sila2codegenerator 0.2.0

________________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""

__version__ = "0.1.0"

# import general packages
import logging
import time         # used for observables
import uuid         # used for observables
import grpc         # used for type hinting only

# import SiLA2 library
import sila2lib.framework.SiLAFramework_pb2 as silaFW_pb2

# import gRPC modules for this feature
from .gRPC import AxisPositionController_pb2 as AxisPositionController_pb2
# from .gRPC import AxisPositionController_pb2_grpc as AxisPositionController_pb2_grpc

# import default arguments
from .AxisPositionController_default_arguments import default_dict


# noinspection PyPep8Naming,PyUnusedLocal
class AxisPositionControllerSimulation:
    """
    Implementation of the *Axis Position Controller* in *Simulation* mode
        Allows to control motion systems like axis systems
    """

    def __init__(self):
        """Class initialiser"""

        logging.debug('Started server in mode: {mode}'.format(mode='Simulation'))

    def _get_command_state(self, command_uuid: str) -> silaFW_pb2.ExecutionInfo:
        """
        Method to fill an ExecutionInfo message from the SiLA server for observable commands

        :param command_uuid: The uuid of the command for which to return the current state

        :return: An execution info object with the current command state
        """

        #: Enumeration of silaFW_pb2.ExecutionInfo.CommandStatus
        command_status = silaFW_pb2.ExecutionInfo.CommandStatus.waiting
        #: Real silaFW_pb2.Real(0...1)
        command_progress = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_estimated_remaining = None
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        command_lifetime_of_execution = None

        # TODO: check the state of the command with the given uuid and return the correct information

        # just return a default in this example
        return silaFW_pb2.ExecutionInfo(
            commandStatus=command_status,
            progressInfo=(
                command_progress if command_progress is not None else None
            ),
            estimatedRemainingTime=(
                command_estimated_remaining if command_estimated_remaining is not None else None
            ),
            updatedLifetimeOfExecution=(
                command_lifetime_of_execution if command_lifetime_of_execution is not None else None
            )
        )

    def MoveToPosition(self, request, context: grpc.ServicerContext) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Executes the observable command "Move To Position"
            Move the axis to the given position with a certain velocity

        :param request: gRPC request containing the parameters passed:
            request.Position (Position): The position to move to. Has to be in the range between MinimumPosition and MaximumPosition. See PositionUnit for the unit that is used for a specific axis. E.g. for rotational axis systems one of the axes needs a position specified in radians.
            request.Velocity (Velocity): The velocity value for the movement. Has to be in the range between MinimumVelocity and MaximumVelocity.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A command confirmation object with the following information:
            commandId: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution: The (maximum) lifetime of this command call.
        """

        # initialise default values
        #: Duration silaFW_pb2.Duration(seconds=<seconds>, nanos=<nanos>)
        lifetime_of_execution: silaFW_pb2.Duration = None

        # TODO:
        #   Execute the actual command
        #   Optional: Generate a lifetime_of_execution

        # respond with UUID and lifetime of execution
        command_uuid = silaFW_pb2.CommandExecutionUUID(value=str(uuid.uuid4()))
        if lifetime_of_execution is not None:
            return silaFW_pb2.CommandConfirmation(
                commandExecutionUUID=command_uuid,
                lifetimeOfExecution=lifetime_of_execution
            )
        else:
            return silaFW_pb2.CommandConfirmation(
                commandExecutionUUID=command_uuid
            )

    def MoveToPosition_Info(self, request, context: grpc.ServicerContext) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Returns execution information regarding the command call :meth:`~.MoveToPosition`.

        :param request: A request object with the following properties
            commandId: The UUID of the command executed.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: An ExecutionInfo response stream for the command with the following fields:
            commandStatus: Status of the command (enumeration)
            progressInfo: Information on the progress of the command (0 to 1)
            estimatedRemainingTime: Estimate of the remaining time required to run the command
            updatedLifetimeOfExecution: An update on the execution lifetime
        """
        # Get the UUID of the command
        command_uuid = request.value

        # Get the current state
        execution_info = self._get_command_state(command_uuid=command_uuid)

        # construct the initial return dictionary in case while is not executed
        return_values = {'commandStatus': execution_info.commandStatus}
        if execution_info.HasField('progressInfo'):
            return_values['progressInfo'] = execution_info.progressInfo
        if execution_info.HasField('estimatedRemainingTime'):
            return_values['estimatedRemainingTime'] = execution_info.estimatedRemainingTime
        if execution_info.HasField('updatedLifetimeOfExecution'):
            return_values['updatedLifetimeOfExecution'] = execution_info.updatedLifetimeOfExecution

        # we loop only as long as the command is running
        while execution_info.commandStatus == silaFW_pb2.ExecutionInfo.CommandStatus.waiting \
                or execution_info.commandStatus == silaFW_pb2.ExecutionInfo.CommandStatus.running:
            # TODO:
            #   Evaluate the command status --> command_status. Options:
            #       command_stats = silaFW_pb2.ExecutionInfo.CommandStatus.waiting
            #       command_stats = silaFW_pb2.ExecutionInfo.CommandStatus.running
            #       command_stats = silaFW_pb2.ExecutionInfo.CommandStatus.finishedSuccessfully
            #       command_stats = silaFW_pb2.ExecutionInfo.CommandStatus.finishedWithError
            #   Optional:
            #       * Determine the progress (progressInfo)
            #       * Determine the estimated remaining time
            #       * Update the Lifetime of execution

            # Update all values
            execution_info = self._get_command_state(command_uuid=command_uuid)

            # construct the return dictionary
            return_values = {'commandStatus': execution_info.commandStatus}
            if execution_info.HasField('progressInfo'):
                return_values['progressInfo'] = execution_info.progressInfo
            if execution_info.HasField('estimatedRemainingTime'):
                return_values['estimatedRemainingTime'] = execution_info.estimatedRemainingTime
            if execution_info.HasField('updatedLifetimeOfExecution'):
                return_values['updatedLifetimeOfExecution'] = execution_info.updatedLifetimeOfExecution

            yield silaFW_pb2.ExecutionInfo(**return_values)

            # we add a small delay to give the client a chance to keep up.
            time.sleep(0.5)
        else:
            # one last time yield the status
            yield silaFW_pb2.ExecutionInfo(**return_values)

    def MoveToPosition_Result(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.MoveToPosition_Responses:
        """
        Returns the final result of the command call :meth:`~.MoveToPosition`.

        :param request: A request object with the following properties
            CommandExecutionUUID: The UUID of the command executed.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.MoveToPosition_Responses = None

        # Get the UUID of the command
        command_uuid = request.value

        # TODO:
        #   Add implementation of Simulation for command MoveToPosition here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.MoveToPosition_Responses(
                **default_dict['MoveToPosition_Responses']
            )

        return return_value


    def MoveToHomePosition(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.MoveToHomePosition_Responses:
        """
        Executes the unobservable command "Move To Home Position"
            Move the axis to its home position

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        # initialise the return value
        return_value = None

        # TODO:
        #   Add implementation of Simulation for command MoveToHomePosition here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.MoveToHomePosition_Responses(
                **default_dict['MoveToHomePosition_Responses']
            )

        return return_value


    def StopMoving(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.StopMoving_Responses:
        """
        Executes the unobservable command "Stop Moving"
            Immediately stops axis movement of a single axis

        :param request: gRPC request containing the parameters passed:
            request.EmptyParameter (Empty Parameter): An empty parameter data type used if no parameter is required.
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: The return object defined for the command with the following fields:
            EmptyResponse (Empty Response): An empty response data type used if no response is required.
        """

        # initialise the return value
        return_value = None

        # TODO:
        #   Add implementation of Simulation for command StopMoving here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.StopMoving_Responses(
                **default_dict['StopMoving_Responses']
            )

        return return_value


    def Subscribe_Position(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.Subscribe_Position_Responses:
        """
        Requests the observable property Position
            The current position of an axis

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            Position (Position): The current position of an axis
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.Subscribe_Position_Responses = None

        # we could use a timeout here if we wanted
        while True:
            # TODO:
            #   Add implementation of Simulation for property Position here and write the resulting
            #   response in return_value

            # create the default value
            if return_value is None:
                return_value = AxisPositionController_pb2.Subscribe_Position_Responses(
                    **default_dict['Subscribe_Position_Responses']
                )


            yield return_value


    def Get_PositionUnit(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.Get_PositionUnit_Responses:
        """
        Requests the unobservable property PositionUnit
            The position unit used for specifying the position of an axis

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            PositionUnit (PositionUnit): The position unit used for specifying the position of an axis
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.Get_PositionUnit_Responses = None

        # TODO:
        #   Add implementation of Simulation for property PositionUnit here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.Get_PositionUnit_Responses(
                **default_dict['Get_PositionUnit_Responses']
            )

        return return_value

    def Get_MinimumPosition(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.Get_MinimumPosition_Responses:
        """
        Requests the unobservable property Minimum Position
            The minimum position limit of an axis

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            MinimumPosition (Minimum Position): The minimum position limit of an axis
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.Get_MinimumPosition_Responses = None

        # TODO:
        #   Add implementation of Simulation for property MinimumPosition here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.Get_MinimumPosition_Responses(
                **default_dict['Get_MinimumPosition_Responses']
            )

        return return_value

    def Get_MaximumPosition(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.Get_MaximumPosition_Responses:
        """
        Requests the unobservable property Maximum Position
            The maximum position limit of an axis

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            MaximumPosition (Maximum Position): The maximum position limit of an axis
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.Get_MaximumPosition_Responses = None

        # TODO:
        #   Add implementation of Simulation for property MaximumPosition here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.Get_MaximumPosition_Responses(
                **default_dict['Get_MaximumPosition_Responses']
            )

        return return_value

    def Get_MinimumVelocity(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.Get_MinimumVelocity_Responses:
        """
        Requests the unobservable property Minimum Velocity
            The minimum velocity limit of an axis

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            MinimumVelocity (Minimum Velocity): The minimum velocity limit of an axis
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.Get_MinimumVelocity_Responses = None

        # TODO:
        #   Add implementation of Simulation for property MinimumVelocity here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.Get_MinimumVelocity_Responses(
                **default_dict['Get_MinimumVelocity_Responses']
            )

        return return_value

    def Get_MaximumVelocity(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.Get_MaximumVelocity_Responses:
        """
        Requests the unobservable property Maximum Velocity
            The maximum velocity limit of an axis

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            MaximumVelocity (Maximum Velocity): The maximum velocity limit of an axis
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.Get_MaximumVelocity_Responses = None

        # TODO:
        #   Add implementation of Simulation for property MaximumVelocity here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.Get_MaximumVelocity_Responses(
                **default_dict['Get_MaximumVelocity_Responses']
            )

        return return_value

    def Get_FCPAffectedByMetadata_AxisIdentifier(self, request, context: grpc.ServicerContext) \
            -> AxisPositionController_pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses:
        """
        Requests the unobservable property FCPAffectedByMetadata Axis Identifier
            Specifies which Features/Commands/Properties of the SiLA server are affected by the Axis Identifier Metadata.

        :param request: An empty gRPC request object (properties have no parameters)
        :param context: gRPC :class:`~grpc.ServicerContext` object providing gRPC-specific information

        :returns: A response object with the following fields:
            AffectedCalls (AffectedCalls): A string containing a list of Fully Qualified Identifiers of Features, Commands and Properties for which the SiLA Client Metadata is expected as part of the respective RPCs.
        """

        # initialise the return value
        return_value: AxisPositionController_pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses = None

        # TODO:
        #   Add implementation of Simulation for property FCPAffectedByMetadata_AxisIdentifier here and write the resulting response
        #   in return_value

        # fallback to default
        if return_value is None:
            return_value = AxisPositionController_pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses(
                **default_dict['Get_FCPAffectedByMetadata_AxisIdentifier_Responses']
            )

        return return_value
