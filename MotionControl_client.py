#!/usr/bin/env python3
"""
________________________________________________________________________

:PROJECT: sila_cetoni

*MotionControl client*

:details: MotionControl:
    Allows to control motion systems like axis systems

:file:    MotionControl_client.py
:authors: Florian Meinicke

:date: (creation)          2020-12-15T07:36:30.354320
:date: (last modification) 2020-12-15T07:36:30.354320

.. note:: Code generated by sila2codegenerator 0.2.0

_______________________________________________________________________

**Copyright**:
  This file is provided "AS IS" with NO WARRANTY OF ANY KIND,
  INCLUDING THE WARRANTIES OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

  For further Information see LICENSE file that comes with this distribution.
________________________________________________________________________
"""
__version__ = "0.1.0"

# import general packages
import logging
import argparse
import grpc
import time

# import meta packages
from typing import Union, Optional

# import SiLA2 library modules
from sila2lib.framework import SiLAFramework_pb2 as silaFW_pb2
from sila2lib.sila_client import SiLA2Client
from sila2lib.framework.std_features import SiLAService_pb2 as SiLAService_feature_pb2
from sila2lib.error_handling import client_err
#   Usually not needed, but - feel free to modify
# from sila2lib.framework.std_features import SimulationController_pb2 as SimController_feature_pb2

# import feature gRPC modules
# Import gRPC libraries of features
from impl.de.cetoni.motioncontrol.axis.AxisSystemControlService.gRPC import AxisSystemControlService_pb2
from impl.de.cetoni.motioncontrol.axis.AxisSystemControlService.gRPC import AxisSystemControlService_pb2_grpc
# import default arguments for this feature
from impl.de.cetoni.motioncontrol.axis.AxisSystemControlService.AxisSystemControlService_default_arguments import default_dict as AxisSystemControlService_default_dict
from impl.de.cetoni.motioncontrol.axis.AxisSystemPositionController.gRPC import AxisSystemPositionController_pb2
from impl.de.cetoni.motioncontrol.axis.AxisSystemPositionController.gRPC import AxisSystemPositionController_pb2_grpc
# import default arguments for this feature
from impl.de.cetoni.motioncontrol.axis.AxisSystemPositionController.AxisSystemPositionController_default_arguments import default_dict as AxisSystemPositionController_default_dict
from impl.de.cetoni.motioncontrol.axis.AxisPositionController.gRPC import AxisPositionController_pb2
from impl.de.cetoni.motioncontrol.axis.AxisPositionController.gRPC import AxisPositionController_pb2_grpc
# import default arguments for this feature
from impl.de.cetoni.motioncontrol.axis.AxisPositionController.AxisPositionController_default_arguments import default_dict as AxisPositionController_default_dict
from impl.de.cetoni.core.ShutdownController.gRPC import ShutdownController_pb2
from impl.de.cetoni.core.ShutdownController.gRPC import ShutdownController_pb2_grpc
# import default arguments for this feature
from impl.de.cetoni.core.ShutdownController.ShutdownController_default_arguments import default_dict as ShutdownController_default_dict


# noinspection PyPep8Naming, PyUnusedLocal
class MotionControlClient(SiLA2Client):
    """
        Allows to control motion systems like axis systems

    .. note:: For an example on how to construct the parameter or read the response(s) for command calls and properties,
              compare the default dictionary that is stored in the directory of the corresponding feature.
    """
    # The following variables will be filled when run() is executed
    #: Storage for the connected servers version
    server_version: str = ''
    #: Storage for the display name of the connected server
    server_display_name: str = ''
    #: Storage for the description of the connected server
    server_description: str = ''

    def __init__(self,
                 name: str = "MotionControlClient",
                 description: str = "Allows to control motion systems like axis systems",
                 server_name: Optional[str] = None,
                 client_uuid: Optional[str] = None,
                 version: str = __version__,
                 vendor_url: str = "cetoni.de",
                 server_hostname: str = "localhost",
                 server_ip: str = "127.0.0.1", server_port: int = 50052,
                 cert_file: Optional[str] = None):
        """Class initialiser"""
        super().__init__(
            name=name, description=description,
            server_name=server_name,
            client_uuid=client_uuid,
            version=version,
            vendor_url=vendor_url,
            server_hostname=server_hostname, server_ip=server_ip, server_port=server_port,
            cert_file=cert_file
        )

        logging.info(
            "Starting SiLA2 service client for service MotionControl with service name: {server_name}".format(
                server_name=name
            )
        )

        # Create stub objects used to communicate with the server
        self.AxisSystemControlService_stub = \
            AxisSystemControlService_pb2_grpc.AxisSystemControlServiceStub(self.channel)
        self.AxisSystemPositionController_stub = \
            AxisSystemPositionController_pb2_grpc.AxisSystemPositionControllerStub(self.channel)
        self.AxisPositionController_stub = \
            AxisPositionController_pb2_grpc.AxisPositionControllerStub(self.channel)
        self.ShutdownController_stub = \
            ShutdownController_pb2_grpc.ShutdownControllerStub(self.channel)

        # initialise class variables for server information storage
        self.server_version = ''
        self.server_display_name = ''
        self.server_description = ''

    def Get_ImplementedFeatures(self):
        """Get a list of all implemented features."""
        # type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Retrieving the list of implemented features of the server:")
        try:
            response = self.SiLAService_stub.Get_ImplementedFeatures(
                SiLAService_feature_pb2.Get_ImplementedFeatures_Parameters()
            )
            for feature_id in response.ImplementedFeatures:
                logging.debug("Implemented feature: {feature_id}".format(
                    feature_id=feature_id.FeatureIdentifier.value)
                    )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response.ImplementedFeatures

    def Get_FeatureDefinition(self, feature_identifier: str) -> Union[str, None]:
        """
        Returns the FDL/XML feature definition of the given feature.

        :param feature_identifier: The name of the feature for which the definition should be returned.
        """
        # type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Requesting feature definitions of feature {feature_identifier}:".format(
            feature_identifier=feature_identifier)
        )
        try:
            response = self.SiLAService_stub.GetFeatureDefinition(
                SiLAService_feature_pb2.GetFeatureDefinition_Parameters(
                    QualifiedFeatureIdentifier=SiLAService_feature_pb2.DataType_FeatureIdentifier(
                        FeatureIdentifier=silaFW_pb2.String(value=feature_identifier)
                    )
                )
            )
            logging.debug("Response of GetFeatureDefinition for {feature_identifier} feature: {response}".format(
                response=response,
                feature_identifier=feature_identifier)
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

    def run(self) -> bool:
        """
        Starts the actual client and retrieves the meta-information from the server.

        :returns: True or False whether the connection to the server is established.
        """
        # type definition, just for convenience
        grpc_err: grpc.Call

        try:
            # Retrieve the basic server information and store it in internal class variables
            #   Display name
            response = self.SiLAService_stub.Get_ServerName(SiLAService_feature_pb2.Get_ServerName_Parameters())
            self.server_display_name = response.ServerName.value
            logging.debug("Display name: {name}".format(name=response.ServerName.value))
            # Server description
            response = self.SiLAService_stub.Get_ServerDescription(
                SiLAService_feature_pb2.Get_ServerDescription_Parameters()
            )
            self.server_description = response.ServerDescription.value
            logging.debug("Description: {description}".format(description=response.ServerDescription.value))
            # Server version
            response = self.SiLAService_stub.Get_ServerVersion(SiLAService_feature_pb2.Get_ServerVersion_Parameters())
            self.server_version = response.ServerVersion.value
            logging.debug("Version: {version}".format(version=response.ServerVersion.value))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return False

        return True

    def stop(self, force: bool = False) -> bool:
        """
        Stop SiLA client routine

        :param force: If set True, the client is supposed to disconnect and stop immediately. Otherwise it can first try
                      to finish what it is doing.

        :returns: Whether the client could be stopped successfully or not.
        """
        # TODO: Implement all routines that have to be executed when the client is stopped.
        #   Feel free to use the "force" parameter to abort any running processes. Or crash your machine. Your call!
        return True

    def EnableAxisSystem(self,
                      parameter: AxisSystemControlService_pb2.EnableAxisSystem_Parameters = None) \
            -> AxisSystemControlService_pb2.EnableAxisSystem_Responses:
        """
        Wrapper to call the unobservable command EnableAxisSystem on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling EnableAxisSystem:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisSystemControlService_pb2.EnableAxisSystem_Parameters(
                    **AxisSystemControlService_default_dict['EnableAxisSystem_Parameters']
                )

            response = self.AxisSystemControlService_stub.EnableAxisSystem(parameter)

            logging.debug('EnableAxisSystem response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def DisableAxisSystem(self,
                      parameter: AxisSystemControlService_pb2.DisableAxisSystem_Parameters = None) \
            -> AxisSystemControlService_pb2.DisableAxisSystem_Responses:
        """
        Wrapper to call the unobservable command DisableAxisSystem on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling DisableAxisSystem:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisSystemControlService_pb2.DisableAxisSystem_Parameters(
                    **AxisSystemControlService_default_dict['DisableAxisSystem_Parameters']
                )

            response = self.impl.de.cetoni.motioncontrol.axis.AxisSystemControlService_stub.DisableAxisSystem(parameter)

            logging.debug('DisableAxisSystem response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def ClearFaultState(self,
                      parameter: AxisSystemControlService_pb2.ClearFaultState_Parameters = None) \
            -> AxisSystemControlService_pb2.ClearFaultState_Responses:
        """
        Wrapper to call the unobservable command ClearFaultState on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling ClearFaultState:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisSystemControlService_pb2.ClearFaultState_Parameters(
                    **AxisSystemControlService_default_dict['ClearFaultState_Parameters']
                )

            response = self.impl.de.cetoni.motioncontrol.axis.AxisSystemControlService_stub.ClearFaultState(parameter)

            logging.debug('ClearFaultState response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition(self,
                      parameter: AxisSystemPositionController_pb2.MoveToPosition_Parameters = None) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Wrapper to call the observable command MoveToPosition on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A command confirmation object with the following information:
            commandExecutionUUID: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling MoveToPosition:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisSystemPositionController_pb2.MoveToPosition_Parameters(
                    **AxisSystemPositionController_default_dict['MoveToPosition_Parameters']
                )

            response = self.impl.de.cetoni.motioncontrol.axis.AxisSystemPositionController_stub.MoveToPosition(parameter)

            logging.debug('MoveToPosition response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition_Info(self,
                           uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command MoveToPosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToPosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )
        try:
            response = self.AxisSystemPositionController_stub.MoveToPosition_Info(uuid)
            logging.debug('MoveToPosition status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition_Result(self,
                             uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> AxisSystemPositionController_pb2.MoveToPosition_Responses:
        """
        Wrapper to get an intermediate response for the observable command MoveToPosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the result response that has been defined for this command.

        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`MoveToPosition_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToPosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )

        try:
            response = self.AxisSystemPositionController_stub.MoveToPosition_Result(uuid)
            logging.debug('MoveToPosition result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToHomePosition(self,
                      parameter: AxisSystemPositionController_pb2.MoveToHomePosition_Parameters = None) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Wrapper to call the observable command MoveToHomePosition on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A command confirmation object with the following information:
            commandExecutionUUID: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling MoveToHomePosition:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisSystemPositionController_pb2.MoveToHomePosition_Parameters(
                    **AxisSystemPositionController_default_dict['MoveToHomePosition_Parameters']
                )

            response = self.impl.de.cetoni.motioncontrol.axis.AxisSystemPositionController_stub.MoveToHomePosition(parameter)

            logging.debug('MoveToHomePosition response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToHomePosition_Info(self,
                           uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command MoveToHomePosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToHomePosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )
        try:
            response = self.AxisSystemPositionController_stub.MoveToHomePosition_Info(uuid)
            logging.debug('MoveToHomePosition status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToHomePosition_Result(self,
                             uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> AxisSystemPositionController_pb2.MoveToHomePosition_Responses:
        """
        Wrapper to get an intermediate response for the observable command MoveToHomePosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the result response that has been defined for this command.

        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`MoveToHomePosition_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToHomePosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )

        try:
            response = self.AxisSystemPositionController_stub.MoveToHomePosition_Result(uuid)
            logging.debug('MoveToHomePosition result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def StopMoving(self,
                      parameter: AxisSystemPositionController_pb2.StopMoving_Parameters = None) \
            -> AxisSystemPositionController_pb2.StopMoving_Responses:
        """
        Wrapper to call the unobservable command StopMoving on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling StopMoving:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisSystemPositionController_pb2.StopMoving_Parameters(
                    **AxisSystemPositionController_default_dict['StopMoving_Parameters']
                )

            response = self.impl.de.cetoni.motioncontrol.axis.AxisSystemPositionController_stub.StopMoving(parameter)

            logging.debug('StopMoving response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition(self,
                      parameter: AxisPositionController_pb2.MoveToPosition_Parameters = None) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Wrapper to call the observable command MoveToPosition on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A command confirmation object with the following information:
            commandExecutionUUID: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling MoveToPosition:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisPositionController_pb2.MoveToPosition_Parameters(
                    **AxisPositionController_default_dict['MoveToPosition_Parameters']
                )

            response = self.AxisPositionController_stub.MoveToPosition(parameter)

            logging.debug('MoveToPosition response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition_Info(self,
                           uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command MoveToPosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToPosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )
        try:
            response = self.AxisPositionController_stub.MoveToPosition_Info(uuid)
            logging.debug('MoveToPosition status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToPosition_Result(self,
                             uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> AxisPositionController_pb2.MoveToPosition_Responses:
        """
        Wrapper to get an intermediate response for the observable command MoveToPosition on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the result response that has been defined for this command.

        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`MoveToPosition_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command MoveToPosition (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )

        try:
            response = self.AxisPositionController_stub.MoveToPosition_Result(uuid)
            logging.debug('MoveToPosition result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def MoveToHomePosition(self,
                      parameter: AxisPositionController_pb2.MoveToHomePosition_Parameters = None) \
            -> AxisPositionController_pb2.MoveToHomePosition_Responses:
        """
        Wrapper to call the unobservable command MoveToHomePosition on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling MoveToHomePosition:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisPositionController_pb2.MoveToHomePosition_Parameters(
                    **AxisPositionController_default_dict['MoveToHomePosition_Parameters']
                )

            response = self.AxisPositionController_stub.MoveToHomePosition(parameter)

            logging.debug('MoveToHomePosition response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def StopMoving(self,
                      parameter: AxisPositionController_pb2.StopMoving_Parameters = None) \
            -> AxisPositionController_pb2.StopMoving_Responses:
        """
        Wrapper to call the unobservable command StopMoving on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A gRPC object with the response that has been defined for this command.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling StopMoving:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = AxisPositionController_pb2.StopMoving_Parameters(
                    **AxisPositionController_default_dict['StopMoving_Parameters']
                )

            response = self.AxisPositionController_stub.StopMoving(parameter)

            logging.debug('StopMoving response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def Shutdown(self,
                      parameter: ShutdownController_pb2.Shutdown_Parameters = None) \
            -> silaFW_pb2.CommandConfirmation:
        """
        Wrapper to call the observable command Shutdown on the server.

        :param parameter: The parameter gRPC construct required for this command.

        :returns: A command confirmation object with the following information:
            commandExecutionUUID: A command id with which this observable command can be referenced in future calls
            lifetimeOfExecution (optional): The (maximum) lifetime of this command call.
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Calling Shutdown:")
        try:
            # resolve to default if no value given
            #   TODO: Implement a more reasonable default value
            if parameter is None:
                parameter = ShutdownController_pb2.Shutdown_Parameters(
                    **ShutdownController_default_dict['Shutdown_Parameters']
                )

            response = self.ShutdownController_stub.Shutdown(parameter)

            logging.debug('Shutdown response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def Shutdown_Info(self,
                           uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> silaFW_pb2.ExecutionInfo:
        """
        Wrapper to get an intermediate response for the observable command Shutdown on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the status information that has been defined for this command. The following fields
                  are defined:
                    * *commandStatus*: Status of the command (enumeration)
                    * *progressInfo*: Information on the progress of the command (0 to 1)
                    * *estimatedRemainingTime*: Estimate of the remaining time required to run the command
                    * *updatedLifetimeOfExecution*: An update on the execution lifetime
        """
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command Shutdown (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )
        try:
            response = self.ShutdownController_stub.Shutdown_Info(uuid)
            logging.debug('Shutdown status information: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response

    def Shutdown_Result(self,
                             uuid: Union[str, silaFW_pb2.CommandExecutionUUID]) \
            -> ShutdownController_pb2.Shutdown_Responses:
        """
        Wrapper to get an intermediate response for the observable command Shutdown on the server.

        :param uuid: The UUID that has been returned with the first command call. Can be given as string or as the
                     corresponding SiLA2 gRPC object.

        :returns: A gRPC object with the result response that has been defined for this command.

        .. note:: Whether the result is available or not can and should be evaluated by calling the
                  :meth:`Shutdown_Info` method of this call.
        """
        if type(uuid) is str:
            uuid = silaFW_pb2.CommandExecutionUUID(value=uuid)

        logging.debug(
            "Requesting status information for command Shutdown (UUID={uuid}):".format(
                uuid=uuid.value
            )
        )

        try:
            response = self.ShutdownController_stub.Shutdown_Result(uuid)
            logging.debug('Shutdown result response: {response}'.format(response=response))
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    def Get_AvailableAxes(self) \
            -> AxisSystemControlService_pb2.Get_AvailableAxes_Responses:
        """Wrapper to get property AvailableAxes from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property AvailableAxes:")
        try:
            response = self.AxisSystemControlService_stub.Get_AvailableAxes(
                AxisSystemControlService_pb2.Get_AvailableAxes_Parameters()
            )
            logging.debug(
                'Get_AvailableAxes response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_AxisSystemState(self) \
            -> AxisSystemControlService_pb2.Subscribe_AxisSystemState_Responses:
        """Wrapper to get property AxisSystemState from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property AxisSystemState:")
        try:
            response = self.AxisSystemControlService_stub.Subscribe_AxisSystemState(
                AxisSystemControlService_pb2.Subscribe_AxisSystemState_Parameters()
            )
            logging.debug(
                'Subscribe_AxisSystemState response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_AxesInFaultState(self) \
            -> AxisSystemControlService_pb2.Subscribe_AxesInFaultState_Responses:
        """Wrapper to get property AxesInFaultState from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property AxesInFaultState:")
        try:
            response = self.AxisSystemControlService_stub.Subscribe_AxesInFaultState(
                AxisSystemControlService_pb2.Subscribe_AxesInFaultState_Parameters()
            )
            logging.debug(
                'Subscribe_AxesInFaultState response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_AxisSystemPosition(self) \
            -> AxisSystemPositionController_pb2.Subscribe_Position_Responses:
        """Wrapper to get property Position from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property Position:")
        try:
            response = self.AxisSystemPositionController_stub.Subscribe_Position(
                AxisSystemPositionController_pb2.Subscribe_Position_Parameters()
            )
            logging.debug(
                'Subscribe_Position response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Subscribe_AxisPosition(self) \
            -> AxisPositionController_pb2.Subscribe_Position_Responses:
        """Wrapper to get property Position from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading observable property Position:")
        try:
            response = self.AxisPositionController_stub.Subscribe_Position(
                AxisPositionController_pb2.Subscribe_Position_Parameters()
            )
            logging.debug(
                'Subscribe_Position response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Get_PositionUnit(self) \
            -> AxisPositionController_pb2.Get_PositionUnit_Responses:
        """Wrapper to get property PositionUnit from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property PositionUnit:")
        try:
            response = self.AxisPositionController_stub.Get_PositionUnit(
                AxisPositionController_pb2.Get_PositionUnit_Parameters()
            )
            logging.debug(
                'Get_PositionUnit response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Get_MinimumPosition(self) \
            -> AxisPositionController_pb2.Get_MinimumPosition_Responses:
        """Wrapper to get property MinimumPosition from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property MinimumPosition:")
        try:
            response = self.AxisPositionController_stub.Get_MinimumPosition(
                AxisPositionController_pb2.Get_MinimumPosition_Parameters()
            )
            logging.debug(
                'Get_MinimumPosition response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Get_MaximumPosition(self) \
            -> AxisPositionController_pb2.Get_MaximumPosition_Responses:
        """Wrapper to get property MaximumPosition from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property MaximumPosition:")
        try:
            response = self.AxisPositionController_stub.Get_MaximumPosition(
                AxisPositionController_pb2.Get_MaximumPosition_Parameters()
            )
            logging.debug(
                'Get_MaximumPosition response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Get_MinimumVelocity(self) \
            -> AxisPositionController_pb2.Get_MinimumVelocity_Responses:
        """Wrapper to get property MinimumVelocity from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property MinimumVelocity:")
        try:
            response = self.AxisPositionController_stub.Get_MinimumVelocity(
                AxisPositionController_pb2.Get_MinimumVelocity_Parameters()
            )
            logging.debug(
                'Get_MinimumVelocity response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response
    def Get_MaximumVelocity(self) \
            -> AxisPositionController_pb2.Get_MaximumVelocity_Responses:
        """Wrapper to get property MaximumVelocity from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property MaximumVelocity:")
        try:
            response = self.AxisPositionController_stub.Get_MaximumVelocity(
                AxisPositionController_pb2.Get_MaximumVelocity_Parameters()
            )
            logging.debug(
                'Get_MaximumVelocity response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    def Get_FCPAffectedByMetadata_AxisIdentifier(self) \
            -> AxisPositionController_pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Responses:
        """Wrapper to get property FCPAffectedByMetadata_AxisIdentifier from the server."""
        # noinspection PyUnusedLocal - type definition, just for convenience
        grpc_err: grpc.Call

        logging.debug("Reading unobservable property FCPAffectedByMetadata_AxisIdentifier:")
        try:
            response = self.AxisPositionController_stub.Get_FCPAffectedByMetadata_AxisIdentifier(
                AxisPositionController_pb2.Get_FCPAffectedByMetadata_AxisIdentifier_Parameters()
            )
            logging.debug(
                'Get_FCPAffectedByMetadata_AxisIdentifier response: {response}'.format(
                    response=response
                )
            )
        except grpc.RpcError as grpc_err:
            self.grpc_error_handling(grpc_err)
            return None

        return response


    @staticmethod
    def grpc_error_handling(error_object: grpc.Call) -> None:
        """Handles exceptions of type grpc.RpcError"""
        # pass to the default error handling
        grpc_error =  client_err.grpc_error_handling(error_object=error_object)

        # Access more details using the return value fields
        # grpc_error.message
        # grpc_error.error_type


def parse_command_line():
    """
    Just looking for command line arguments
    """
    parser = argparse.ArgumentParser(description="A SiLA2 client: MotionControl")
    parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)

    return parser.parse_args()


if __name__ == '__main__':
    # or use logging.INFO (=20) or logging.ERROR (=30) for less output
    logging.basicConfig(format='%(levelname)-8s| %(module)s.%(funcName)s: %(message)s', level=logging.DEBUG)

    parsed_args = parse_command_line()

    # start the server
    sila_client = MotionControlClient(server_ip='127.0.0.1', server_port=50052)
    sila_client.run()

    # Log connection info
    logging.info(
        (
            'Connected to SiLA Server {display_name} running in version {version}.' '\n'
            'Service description: {service_description}'
        ).format(
            display_name=sila_client.server_display_name,
            version=sila_client.server_version,
            service_description=sila_client.server_description
        )
    )

    # TODO:
    #   Write your further function calls here to run the client as a standalone application.
